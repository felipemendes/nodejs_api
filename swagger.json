{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger PurAí API",
    "description": "JavaScript PurAí API for Node.js",
    "contact": {
      "email": "felipemendes@me.com"
    },
    "license": {
      "name": "GNU GPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [{
    "name": "Documentation",
    "description": "JavaScript PurAí API for Node.js",
    "externalDocs": {
      "description": "Find out more",
      "url": "https://github.com/felipemendes/purai_nodejs"
    }
  }],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get all events",
        "description": "Optional parameters are: Category, Upcoming events, Status, UUID, search term, page and limit",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "status",
            "in": "query",
            "description": "Status of event that we want to find. (1: Active, 0: Inactive)",
            "type": "integer"
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "UUID of event that we want to find. (e.g.: 955b9575-e542-461c-939a-5ef41e733859)",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search events by term in fields title, place, address and city",
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search events by terms in category name",
            "type": "string"
          },
          {
            "name": "upcoming",
            "in": "query",
            "description": "Start date to find events. By default only events with a date greater than or equal to the current date will return. Date format yyyy-MM-dd",
            "type": "string"
          },
          {
            "name": "saleplace",
            "in": "query",
            "description": "Search events by terms in sale places name",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number considering limit value. (Default page is 1)",
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Get events by limit informed. (Default value is 10)",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Add a new event",
        "description": "Pass Event object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "Event object that needs to be added",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Event"
          }
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Get all categories",
        "description": "Optional parameters are: Status, UUID, search term, page and limit",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "status",
            "in": "query",
            "description": "Status of category that we want to find. (1: Active, 0: Inactive)",
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "UUID of category that we want to find. (e.g.: 955b9575-e542-461c-939a-5ef41e733859)",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search categories by term in title field",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number considering limit value. (Default page is 1)",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Get events by limit informed. (Default value is 10)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Add a new category",
        "description": "Pass Category object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "Category object that needs to be added",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Category"
          }
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/salePlaces": {
      "get": {
        "tags": [
          "sale places"
        ],
        "summary": "Get all sale places",
        "description": "Optional parameters are: Status, UUID, search term, page and limit",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "status",
            "in": "query",
            "description": "Status of sale place that we want to find. (1: Active, 0: Inactive)",
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "UUID of sale place that we want to find. (e.g.: 955b9575-e542-461c-939a-5ef41e733859)",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search sale places by term in title field",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number considering limit value. (Default page is 1)",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Get sale places by limit informed. (Default value is 10)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SalePlace"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "post": {
        "tags": [
          "sale places"
        ],
        "summary": "Add a new sale place",
        "description": "Pass sale place object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "Sale place object that needs to be added",
          "required": true,
          "schema": {
            "$ref": "#/definitions/SalePlace"
          }
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SalePlace"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "description": "Pass User object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "User object that needs to be added",
          "required": true,
          "schema": {
            "$ref": "#/definitions/User"
          }
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Login",
        "description": "Pass login credentials in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "Login object",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Login"
          }
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/events/{uuid}": {
      "delete": {
        "tags": [
          "events"
        ],
        "summary": "Delete event with given UUID",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "UUID of event that we want to delete",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "put": {
        "tags": [
          "events"
        ],
        "summary": "Update a existing event",
        "description": "Pass Event object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of event that we want to delete",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Event object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/categories/{uuid}": {
      "delete": {
        "tags": [
          "categories"
        ],
        "summary": "Delete category with given UUID",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "UUID of category that we want to delete",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "put": {
        "tags": [
          "categories"
        ],
        "summary": "Update a existing category",
        "description": "Pass Category object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of category that we want to delete",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Category object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/salePlaces/{uuid}": {
      "delete": {
        "tags": [
          "sale places"
        ],
        "summary": "Delete sale place with given UUID",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "UUID of sale place that we want to delete",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SalePlace"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "put": {
        "tags": [
          "sale places"
        ],
        "summary": "Update a existing sale place",
        "description": "Pass sale place object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of sale place that we want to delete",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Sale place object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalePlace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SalePlace"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    },
    "/user/{uuid}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user with given UUID",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "UUID of user that needs to be found",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user with given UUID",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "UUID of user that we want to delete",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a existing user",
        "description": "Pass User object data in body",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "UUID of user that we want to delete",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid parameter supplied"
          },
          "404": {
            "description": "Results not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Event": {
      "type": "object",
      "required": [
        "title",
        "url_image",
        "place",
        "place_phone",
        "date",
        "address",
        "city",
        "id_category",
        "id_category"
      ],
      "properties": {
        "status": {
          "type": "boolean",
          "default": 1,
          "enum": [
            "0",
            "1"
          ]
        },
        "title": {
          "type": "string"
        },
        "url_image": {
          "type": "string",
          "format": "file"
        },
        "place": {
          "type": "string"
        },
        "place_phone": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "id_category": {
          "type": "integer"
        },
        "id_sale_place": {
          "type": "integer"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "title",
        "url_image"
      ],
      "properties": {
        "status": {
          "type": "boolean",
          "default": 1,
          "enum": [
            "0",
            "1"
          ]
        },
        "title": {
          "type": "string"
        },
        "url_image": {
          "type": "string",
          "format": "file"
        }
      }
    },
    "SalePlace": {
      "type": "object",
      "required": [
        "title",
        "phone"
      ],
      "properties": {
        "status": {
          "type": "boolean",
          "default": 1,
          "enum": [
            "0",
            "1"
          ]
        },
        "title": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "name",
        "email",
        "password"
      ],
      "properties": {
        "status": {
          "type": "boolean",
          "default": 1,
          "enum": [
            "0",
            "1"
          ]
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Login": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
  }
}